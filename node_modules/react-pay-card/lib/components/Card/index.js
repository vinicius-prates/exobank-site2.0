import React from 'react';
import { useState, useEffect, useMemo } from 'react';
import { CSSTransition, TransitionGroup, SwitchTransition } from 'react-transition-group';
import { Dino } from '../../badges/dino';
import { checkCard } from '../../utils/checkCard';
import { shuffleBackground } from '../../utils/shuffleBackground';
import chip from '../../assets/icons/chip.png';
import './styles.css';
const CARDS = {
    visa: '^4',
    amex: '^(34|37)',
    mastercard: '^5[1-5]',
    discover: '^6011',
    unionpay: '^62',
    diners: '^(30[0-5]|36)'
};
const cardBackgroundName = () => {
    let random = Math.floor(Math.random() * 20 + 1);
    return `${random}.jpeg`;
};
const BACKGROUND_IMG = shuffleBackground();
const Card = ({ cardHolder, cardNumber, cardMonth, cardYear, cardCvv, currentFocusedElm, cardNumberRef, cardHolderRef, cardDateRef, }) => {
    const [style, setStyle] = useState();
    const [isCardFlipped, setIsCardFlipped] = useState(false);
    const cardType = (cardNumber) => {
        const number = cardNumber;
        let re;
        for (const card of Object.keys(CARDS)) {
            const pattern = CARDS[card];
            re = new RegExp(pattern);
            if (number.match(re) != null) {
                const nCard = checkCard(card);
                return nCard;
            }
        }
        return React.createElement(Dino, null);
    };
    const useCardType = useMemo(() => {
        return cardType(cardNumber);
    }, [cardNumber]);
    const outlineElementStyle = (element) => {
        return element
            ? {
                width: `${element.offsetWidth}px`,
                height: `${element.offsetHeight}px`,
                transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`
            }
            : null;
    };
    useEffect(() => {
        if (currentFocusedElm) {
            const style = outlineElementStyle(currentFocusedElm.current);
            setStyle(style);
        }
    }, [currentFocusedElm]);
    const maskCardNumber = (cardNumber) => {
        let cardNumberArr = cardNumber.split('');
        cardNumberArr.forEach((val, index) => {
            if (index > 4 && index < 14) {
                if (cardNumberArr[index] !== ' ') {
                    cardNumberArr[index] = '*';
                }
            }
        });
        return cardNumberArr;
    };
    return (React.createElement("div", { className: 'card-item ' + (isCardFlipped ? '-active' : ''), onClick: () => {
            setIsCardFlipped(!isCardFlipped);
        } },
        React.createElement("div", { className: "card-item__side -front" },
            React.createElement("div", { className: `card-item__focus ${currentFocusedElm ? `-active` : ``}`, style: style }),
            React.createElement("div", { className: "card-item__cover" },
                React.createElement("img", { alt: "", src: BACKGROUND_IMG, className: "card-item__bg" })),
            React.createElement("div", { className: "card-item__wrapper" },
                React.createElement("div", { className: "card-item__top" },
                    React.createElement("img", { src: chip, alt: "", className: "card-item__chip" }),
                    React.createElement("div", { className: "card-item__type" },
                        React.createElement("div", { className: "card-item__typeImg" }, useCardType))),
                React.createElement("label", { className: "card-item__number", itemRef: '', ref: cardNumberRef },
                    React.createElement(TransitionGroup, { className: "slide-fade-up", component: "div" }, cardNumber ? (maskCardNumber(cardNumber).map((val, index) => (React.createElement(CSSTransition, { classNames: "slide-fade-up", timeout: 250, key: index },
                        React.createElement("div", { className: "card-item__numberItem" }, val))))) : (React.createElement(CSSTransition, { classNames: "slide-fade-up", timeout: 250 },
                        React.createElement("div", { className: "card-item__numberItem" }, "#"))))),
                React.createElement("div", { className: "card-item__content" },
                    React.createElement("label", { className: "card-item__info", ref: cardHolderRef },
                        React.createElement("div", { className: "card-item__holder" }, "Card Holder"),
                        React.createElement("div", { className: "card-item__name" },
                            React.createElement(TransitionGroup, { component: "div", className: "slide-fade-up" }, cardHolder === 'FULL NAME' ? (React.createElement(CSSTransition, { classNames: "slide-fade-up", timeout: 250 },
                                React.createElement("div", null, "FULL NAME"))) : (cardHolder
                                .split('')
                                .map((val, index) => (React.createElement(CSSTransition, { timeout: 250, classNames: "slide-fade-right", key: index },
                                React.createElement("span", { className: "card-item__nameItem" }, val)))))))),
                    React.createElement("div", { className: "card-item__date", ref: cardDateRef },
                        React.createElement("label", { className: "card-item__dateTitle" }, "Expires"),
                        React.createElement("label", { className: "card-item__dateItem" },
                            React.createElement(SwitchTransition, { "in-out": true },
                                React.createElement(CSSTransition, { classNames: "slide-fade-up", timeout: 200, key: cardMonth },
                                    React.createElement("span", null,
                                        !cardMonth ? 'MM' : cardMonth,
                                        ' ')))),
                        "/",
                        React.createElement("label", { htmlFor: "cardYear", className: "card-item__dateItem" },
                            React.createElement(SwitchTransition, { "out-in": true },
                                React.createElement(CSSTransition, { classNames: "slide-fade-up", timeout: 250, key: cardYear },
                                    React.createElement("span", null, !cardYear
                                        ? 'YY'
                                        : cardYear
                                            .toString()
                                            .substr(-2))))))))),
        React.createElement("div", { className: "card-item__side -back" },
            React.createElement("div", { className: "card-item__cover" },
                React.createElement("img", { alt: "", src: BACKGROUND_IMG, className: "card-item__bg" })),
            React.createElement("div", { className: "card-item__band" }),
            React.createElement("div", { className: "card-item__cvv" },
                React.createElement("div", { className: "card-item__cvvTitle" }, "CVV"),
                React.createElement("div", { className: "card-item__cvvBand" },
                    React.createElement(TransitionGroup, null, cardCvv.split('').map((val, index) => (React.createElement(CSSTransition, { classNames: "zoom-in-out", key: index, timeout: 250 },
                        React.createElement("span", null, "*")))))),
                React.createElement("div", { className: "card-item__type" },
                    React.createElement("div", { className: "card-item__typeImgCover" }, useCardType))))));
};
export default Card;
//# sourceMappingURL=index.js.map